1:https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
 int maxProfit(vector<int>& prices) {
      int n = prices.size(),pt=0,res=0;
      for(int i=1;i<n;i++){
          if(prices[i]>prices[pt]){
              res = max(res,prices[i]-prices[pt]);
          }else{
              pt = i;
          }
      }
      return res;
        
 }

2:https://leetcode.com/problems/valid-palindrome/
  bool isPalindrome(string s) {
        int l = 0,r = s.size();
        while(l<r){
            if(((s[l]>='0' && s[l]<='9') || (s[r]>='0' && s[r]<='9'))){
                if(s[l]==s[r]){
                    l++,r--;
                }else{
                    return false;
                }
            }
            while(l<r && !((s[l] >= 'a' && s[l] <= 'z') || (s[l] >= 'A' && s[l] <= 'Z'))){ 
                l++; 
            }    
            while(l<r && !((s[r] >= 'a' && s[r] <= 'z') || (s[r] >= 'A' && s[r] <= 'Z'))){ 
                r--;
            }  
            
                                          
            //cout<<s[l]<<" "<<s[r]<<endl;
            if(tolower(s[l]) != tolower(s[r])){
                return false;
            }
            l++,r--;
        }
        
        return true;
 }
 
3:https://leetcode.com/problems/majority-element/
int majorityElement(vector<int>& nums) {
        //using hashmap
        int count = 0;
        unordered_map<int, int> mp; 
        int n = nums.size();
        for(auto i:nums){
            mp[i]++;
        }
        for(auto i:mp){
            if(i.second>n/2){
                count = i.first;
                break;
            }
        }
        return count;
        
}

4:https://leetcode.com/problems/add-digits/
  int addDigits(int num) {
        if(num==0){
            return 0;
        }
         return num%9==0?9:num%9;
        
   }

5:https://leetcode.com/problems/two-sum/
  vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> imap;
    
        for (int i = 0;; ++i) {
            auto it = imap.find(target - nums[i]);
        
            if (it != imap.end()) 
            return vector<int> {i, it->second};
            
            imap[nums[i]] = i;
        }
   }
 
()6:https://leetcode.com/problems/add-two-numbers/
  ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode preHead(0), *p = &preHead;
        int extra = 0;
        while (l1 || l2 || extra) {
            int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + extra;
            extra = sum / 10;
            p->next = new ListNode(sum % 10);
            p = p->next;
            l1 = l1 ? l1->next : l1;
            l2 = l2 ? l2->next : l2;
        }
        return preHead.next;
  }
  
7:https://leetcode.com/problems/longest-common-prefix/
 string longestCommonPrefix(vector<string>& strs) {
        int i = 0,n = strs.size();
        if(n==0){
            return "";
        }
        if(n==1){
            return strs[0];
        }
        sort(strs.begin(),strs.end());
        
        string first = strs[0],last = strs[n-1];
        int  e = min(first.size(),last.size());
        while(i<e && first[i]==last[i]){
            i++;
        }
        return first.substr(0,i);
  }
  
 8:https://leetcode.com/problems/remove-duplicates-from-sorted-array/
 int removeDuplicates(vector<int>& nums) {
        int count = 0,n = nums.size(),i;
        if(n==0){
            return 0;
        }
        for( i =1;i<n;i++){
            if(nums[i]==nums[i-1]){
                count++;
            }else{
                nums[i-count] = nums[i]; 
            }
        }
        return i-count;
   }
9:https://leetcode.com/problems/remove-duplicates-from-sorted-list/
  ListNode* deleteDuplicates(ListNode* head) {
        ListNode *curr=head,*n;
        while(curr!=NULL){
            n = curr->next;
            if(n!=NULL && n->val==curr->val){
                curr->next = n->next;
            }else{
                curr=n;
            }
            
        }
        return head;
  }
  
10:https://leetcode.com/problems/remove-linked-list-elements/
  ListNode* removeElements(ListNode* head, int val) {
        if(head == NULL){
            return NULL;
        }
        if(head->val==val){
            return head;
        }
        struct ListNode* node1 = removeElements(head->next,val);
        return ;
  }
  
11:https://leetcode.com/problems/reverse-linked-list/
   ListNode* reverseList(ListNode* head) {
        struct ListNode *curr = head,*prev = NULL,*next;
        while(curr!=NULL){
            next=curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        head = prev;
        return head;
   }
   
12:https://leetcode.com/problems/palindrome-linked-list/
   bool isPalindrome(ListNode* head) {\
        ListNode* curr = head;
        stack<int> st;
        while(curr!=NULL){
            st.push(curr->val);
            curr = curr->next;
        }
        while(head!=NULL){
            int tp = st.top();
            if(tp==head->val){
                st.pop();
            }else{
                return false;
            }
            head = head->next;

        }
        return true;
        
        
    }
    
