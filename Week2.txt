1:https://leetcode.com/problems/sort-colors/
    void sortColors(vector<int>& nums) {
        int cred = 0,cwhite = 0,cblue=0,i=0;
        for(auto i:nums){
            if(i==0){
                cred++;
            }else if(i==1){
                cwhite++;
            }else{
                cblue++;
            }
        }
        while(cred--){
            nums[i] = 0;
            printf("%d ",nums[i]);
            i++;
            
        }
        while(cwhite--){
            nums[i] = 1;
            printf("%d ",nums[i]);
            i++;

        }
        while(cblue--){
            nums[i] = 2;
            printf("%d ",2);
            i++;
        }
        
    }
 2():https://leetcode.com/problems/insertion-sort-list/
 ListNode* insertionSortList(ListNode* head) {
        ListNode dummy(INT_MIN),*pre(&dummy),*next(nullptr);
        dummy.next = head;
        while(head){
            pre = &dummy;
            if(head && head->next && head->val > head->next->val){
                while(pre && pre->next && pre->next->val < head->next->val){
                    pre = pre->next;
                }
                next = pre -> next;
                pre -> next = head -> next;
                head -> next = head -> next -> next;
                pre -> next -> next = next;
            } else {
                head = head->next;
            }
        }
        return dummy.next;
        
    }
3(:https://leetcode.com/problems/sort-list/
 ListNode* splitList(ListNode*& head){
        ListNode *slow = head, *fast = head->next;
        while (fast != nullptr)
		{
            fast = fast->next;
            if (fast != nullptr)
			{
                slow = slow->next;
                fast = fast->next;
            }
        }
		
        ListNode* second = slow->next;
        slow->next = nullptr;
        return second;
   }
    
    ListNode* mergeSort (ListNode* first, ListNode* second){
        if (first == nullptr)
            return second;
			
        if (second == nullptr)
            return first;
			
        if (first->val < second->val){
            first->next = mergeSort(first->next, second);
            return first;
        }
        else{
            second->next = mergeSort(first, second->next);
            return second;
        }
    }
    
 4:https://leetcode.com/problems/largest-number/
 bool compareNums(int &a,int &b){
        return to_string(a)+to_string(b)>to_string(b)+to_string(a);
 }
 string largestNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end(),compareNums);
        string res;
      
        for(auto i:nums){
            res+=to_string(i);
        }
        while(res[0]=='0' && res.length()>1)
            res.erase(0,1);
        return res;
        
 }
 
 5:https://leetcode.com/problems/largest-perimeter-triangle/
  int largestPerimeter(vector<int>& A) {
        sort(A.begin(),A.end());
        for(auto i=A.size()-1;i>=2;i--){
            if(A[i]<A[i-1]+A[i-2]){
                return A[i]+A[i-1]+A[i-2];
            }
        }
        return 0;
  
  }
  
 6:https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/
 
  bool compareInterval(const vector<int> &r1,const vector<int> &r2){
    if(r1[1]==r2[1]){
        return r1[0]>r2[0];
    }
    return r1[1]>r2[1];
  }

 vector<int> filterRestaurants(vector<vector<int>>& restaurants, int veganFriendly, int maxPrice, int maxDistance){
  vector<int> res;
  sort(restaurants.begin(),restaurants.end(),compareInterval);
  for(int i=0;i<restaurants.size();i++){
     if((veganFriendly && !restaurants[i][2]) || restaurants[i][3]>maxPrice || restaurants[i][4]>maxDistance){

          continue;

     }else{
         res.push_back(restaurants[i][0]);
     }
 }

      return res;

      }

        
        
};
7:https://leetcode.com/problems/min-stack/

  stack<pair<int,int>> st;

    /** initialize your data structure here. */
  
    
    void push(int x) {
        if(!st.empty()){
            st.push(make_pair(x,min(st.top().second,x)));
        }else{
            st.push(make_pair(x,x));
        }
    }
    
    void pop() {
        if(!st.empty())
            st.pop();
    
    }
    
    int top() {
        return st.top().first;
    }
    
    int getMin() {
        return st.top().second;
    }
    
8:https://leetcode.com/problems/implement-stack-using-queues/
class MyStack {
     queue<int> que;
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    	// Push element x onto stack.
	void push(int x) {
		que.push(x);
		for(int i=0;i<que.size()-1;++i){
			que.push(que.front());
			que.pop();
		}
	}

	// Removes the element on top of the stack.
	void pop() {
		que.pop();
	}

	// Get the top element.
	int top() {
		return que.front();
	}

	// Return whether the stack is empty.
	bool empty() {
		return que.empty();
	}
};

9:https://leetcode.com/problems/implement-queue-using-stacks/
class MyQueue {
private:
    stack<int> s1,s2;
    
public:
    /** Initialize your data structure here. */
    MyQueue() {
      
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        s1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int res = peek();
        s2.pop();
        return res;
    }
    
    /** Get the front element. */
    int peek() {
        if(s2.empty()){
            while(!s1.empty()){
                s2.push(s1.top());
                s1.pop();
            }
        }
        int res = s2.top();
        
        return res;
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return s1.empty()&&s2.empty();
    }
};

10:https://leetcode.com/problems/next-greater-element-ii/
 vector<int> nextGreaterElements(vector<int>& nums){ 
        int n = nums.size();
        vector<int> res(n,-1),stack;
        for(int i=0;i<2*n;i++){
             while(!stack.empty() && nums[stack.back()]<nums[i % n]){
                res[stack.back()] = nums[i%n];
                stack.pop_back();
             }
            stack.push_back(i%n);
        }
        
        return res;
 }
 11():https://leetcode.com/problems/exclusive-time-of-functions/
 
 12:https://leetcode.com/problems/merge-intervals/
  vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if(intervals.size()<=1) return intervals;
        vector<vector<int>> res;
        sort(intervals.begin(),intervals.end());
        res.push_back(intervals[0]);
        for(int i=1;i<intervals.size();i++){
          //  cout<<intervals[i][0]<< " "<<intervals[i][1]<<endl;
            if(intervals[i][0]<=res.back()[1]){
                res.back()[1] = max(res.back()[1],intervals[i][1]);
            }else{
                res.push_back(intervals[i]);
            }
        }     
        return res;
   }
 13:https://leetcode.com/problems/insert-interval/
 
 14:
 https://leetcode.com/problems/search-in-rotated-sorted-array/
  int search(vector<int>& nums, int target) {
        int start = 0, end = nums.size() - 1;
    while (start < end) {
        int mid = (start + end) / 2;
        if (nums[mid] > nums[end]) {  // eg. 3,4,5,6,1,2
            if (target > nums[mid] || target <= nums[end]) {
                start = mid + 1;
            } else {
                end = mid;
            }
        } else {  // eg. 5,6,1,2,3,4
            if (target > nums[mid] && target <= nums[end]) {
                start = mid + 1;
            } else {
                end = mid;
            }
        }
    }
    if (start == end && target != nums[start]) return -1;
        return start;
    }
15:https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
int lower_bound(vector<int>& nums, int target) {
    int l = 0, r = nums.size()-1;
    while (l <= r) {
        int mid = (r-l)/2+l;
        if (nums[mid] < target)
            l = mid+1;
        else
            r = mid-1;
    }
    return l;
}
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int idx1 = lower_bound(nums, target);
        int idx2 = lower_bound(nums, target+1)-1;
        if (idx1 < nums.size() && nums[idx1] == target)
            return {idx1, idx2};
        else
            return {-1, -1};
    }
};

16:https://leetcode.com/problems/search-insert-position/
int searchInsert(vector<int>& nums, int target) {
        int low = 0,high = nums.size()-1,mid;
        while(low<=high){
            mid = low +(high-low)/2;
            if(target == nums[mid]){
                return mid;
            }else if(target>nums[mid]){
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return low;
        
    }

17:https://leetcode.com/problems/sqrtx/
int mySqrt(int x) {
        if(x<2){
            return x;
        }
        int left = 1,right=x/2;
        int m;
        while(left<=right){
            m = (left + right)/2;
            if(m==x/m){
                return m;
            }
            if(m>x/m){
                right = m-1;
            }else{
                left = m+1;
            }
            
        }
        return left-1;
 
    }
  21:https://leetcode.com/problems/merge-two-sorted-lists/
      ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1){
            return l2;
        }
        if(!l2){
            return l1;
        }
        if(l1->val>l2->val){
            l2->next = mergeTwoLists(l1,l2->next);
            return l2;
        }else{
            l1->next =   mergeTwoLists(l1->next,l2);
            return l1;
        }
    }
   
 
 
